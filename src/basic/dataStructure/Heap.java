package basic.dataStructure;

public class Heap {
    /**
     *
     *      힙(Heap) 자료구조
     *
     *      힙자료구조는 원소 값들 중에서 최대값과 최소값을 구하는데 효율적인 자려구조
     *      힙은 완전 이진트리의 형태를 가지면서 동시에 가음과 같은 힙 성질을 만족해야 한다.
     *      = 부모노드가 자식노드보다 큰경우 - 최대 힙
     *      = 부모노드가 자식노드보다 작은 경우 - 최소 힙
     *
     *      UpHeap
     *      UpHeap은 힙에 새로운 원소를 삽입하고, 새로운 원소를 포함한 새로운 힙을 구성하는 과정
     *      과정은 새로 추가되는 원소를 가장 말단에 위치 시키고, 부모 노드와 비교하여 부모 노드보다 값이 클 경우 위치를 교환 하는 방식
     *      이 과정을 루트 노드까지 위치하거나 부모노드보다 작을때 까지 반복
     *
     *      DownHeap
     *      DownHeap은 UpHeap과는 반대로 힙에서 노드를 제거하는 작업을 의미
     *      즉, 힙의 루트로부터 최대값을 가져오는 일을 의미. 그 다음 다시 힙을 유지해야 하므로 DownHeap과정을 거치게 된다.
     *      가장 먼저 루트 값이 비게되므로 가장 말단에 있는 값을 루트 노드에 위치시킨다음
     *      자식노드와 비교를 하여 자식 노드보다 클 경우에는 그대로 유지, 작을 경우 자식노드와 위치를 교환
     *      이 과정을 자신이 리프노드가 되거나 자식노드보다 자신이 클 경우까지 반복
     *
     *      힙을 배열로 표현하기
     *      힙은 완전 이진트리로 구성되기 때문에 배열을 통해서 구성한다.
     *      특정 Index의 Left_index와 Right_Index
     *      Left_Index = Index * 2 +1
     *      Right_Index = Index * 2 +2
     *
    */
}
